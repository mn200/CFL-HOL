\section{Equivalence of acceptance by final state and empty stack}
\label{sec:laeslafs}

The first property we establish is that the languages accepted by PDA by final state are exactly the languages accepted by PDA by empty stack.
This is done by establishing that PDAs of one type can be emulated by PDAs of the other.

\subsection{PDA construction for acceptance by empty stack}

\begin{theorem}
  For every machine $M_2$ accepting language $L$ by final state, there is a machine $M_1$ such that $N(M_1) = L$.
\label{thm:lafsEqlaes}
\end{theorem}

\begin{proof}
  Let PDA $M_2 = (Q,\Sigma,\Gamma,\delta, q_0, m, Z_0,F)$.
  We invent new states $q_e$ and $q_0'$, and a new stack symbol $X_0$, and then let $M_1 = (Q \cup \{q_e,q_0'\},\Sigma,\Gamma\cup\{X_0\},\delta',q_0',X_0,\phi)$, where $\delta'$ is defined by the following rules:
\begin{description}
\item[Rule 1] $\delta'(q_0',\epsilon,X_0) = {(q0,Z_0X_0)}$.

\item[Rule 2] For all $q$ in $F$, and $Z$ in $\Gamma$ $\cup$ ${X_0}$,
  $\delta'(q,\epsilon,Z)$ contains $(q_e,\epsilon)$.

\item[Rule 3] For all $Z$ in $\Gamma$ $\cup$ ${X_0}$,
  $\delta'(q_e,\epsilon,Z)$ contains $(q_e,\epsilon)$.

\item[Rule 4] $\delta'(q,a,Z)$ includes the elements of
  $\delta(q,a,Z)$ for all $q$, $a$ and $Z$.
\end{description}

$M_1$ simulates $M_2$ by first putting a $M_2$'s stack marker~($Z_0$) on its stack~(Rule~1).
Below this, $M_2$ preserves its own bottom of stack marker $X_0$.
This ensures that $M_1$ does not accidentally accept if $M_2$ empties its stack without entering a
final state.
Rule~4 allows $M_1$ to process the input in exactly the same manner as $M_2$.
Rule~2 gives $M_1$ the opportunity to enter the state $q_e$ (triggering Rule~3) when $M_2$ enters a final state.
Rule~3 allows $M_1$ to pop off the remaining stack contents once $M_1$ has accepted
the input, thus accepting the input by empty stack criterion.

In HOL, we define a function \HOLtm{newm} that constructs the new machine.
It takes not just the input machine $M_2$ as a parameter, but also new states ($q_0'$ and $q_e$) and the new stack symbol $X_0$.
\begin{holdef}[\HOLtm{newm}]
\begin{salltt}

\HOLthm[nostile,>>,def,width=80,X0/x0,q0'/q0,M2/p]{laeslafs.newm_def}
\end{salltt}
\end{holdef}
where \HOLtm{finalStateTrans} implements Rule~2 of the
construction, and \HOLtm{newStateTrans} implements Rule~3.

We first prove that if $x \in L(M_2)$ then $x \in N(M_1)$.
As $x$ is accepted by final state, $(q_0,x,Z_0) \vdash_{M_{2}}^{*} (q,\epsilon,\gamma)$ for some $q \in F$, and $\gamma \in \Gamma^*$.
Now consider $M_1$'s behaviour on input $x$.
Rule~1 gives $(q_0',x,X_0) \vdash_{M_1} (q_0,x,Z_0X_0)$.

By Rule~2, every move of $M_2$ is a legal move for $M_1$, so we also have
$(q_0,x,Z_0X_0) \vdash_{M_1}^{*} (q,\epsilon, \gamma{}X_0)$.
In Hopcroft and Ullman, this last step is justified by
\begin{quote}
\itshape If a PDA can make a sequence of moves from a given ID, it can make the same sequence of moves from any ID obtained from the first by inserting a fixed string of stack symbols below the original stack contents.
\end{quote}
Simple asides such as the above end up requiring a proof first that single transitions can have arbitrary symbols added underneath their stacks, followed by an induction to show
\begin{holthm}
\begin{salltt}

\HOLthm[nostile,>>,M/m]{pdaDef.idcStackInsert}
\end{salltt}
\end{holthm}
Returning to the proof, by Rules 3 and 4, $(q,\epsilon,\gamma
X_0) \vdash_{M_1}^{*} (q_e,\epsilon,\epsilon)$.
Therefore, $(q_0',x,X_0) \vdash_{M_1}^{*} (q_e,\epsilon,\epsilon)$, and $M_1$ accepts $x$ by empty stack.
Our final HOL theorem is
\begin{holthm}
\begin{salltt}

\HOLthm[nostile,>>,M2/m,X0/x0]{laeslafs.lafsImpLaes}
\end{salltt}
\label{holthm:lafsImplaes}
\end{holthm}
(Note the requirement that the new states and stack symbol must be suitably fresh.)

The converse, if $x \in N(M_1)$ then $x \in L(M_2)$, is straightforward, and we can then conclude with a HOL version of Theorem~\ref{thm:lafsEqlaes}
\begin{holthm}
\begin{salltt}

\HOLthm[nostile,>>,M1/m',M2/m]{laeslafs.thm51}
\end{salltt}
\label{holthm:thm51}
\end{holthm}
(\HOLtm{univ(:'ssym)} is the universal set of all possible stack symbols and
\HOLtm{univ(:'state)} is the universal set of all possible states.)

The two extra conditions in the premise of the HOL
statement are sufficient to ensure that we will always be able to pick fresh states $q_0'$ and $q_e$, as well a fresh stack symbol $X_0$.
The requirement to be explicit with details such as this are entirely typical of the mechanisation process.
\end{proof}

\subsection{PDA construction for acceptance by final state}

Briefly, we present the construction of a ``final-state-accepting'' PDA that accepts the same inputs as an ``empty-stack-accepting'' PDA.

\begin{theorem}
If $L$ is $N(M_1)$ for some PDA $M_1$, then $L$ is $L(M_2)$ for
some PDA $M_2$.
\end{theorem}

\begin{proof}
  We simulate $M_1$ using $M_2$ and detect when $M_1$ empties its
  stack, $M_2$ enters a final state when and only when this
  occurs. Let PDA $M_1$ be $(Q,\Sigma,\Gamma,\delta,q_0,Z_0,\phi)$.
  Given fresh states $q_0'$ and $q_f$, and a fresh stack symbol $X_0$, let $M_2 = (Q \cup \{q_0',q_f\},\Sigma,\Gamma\cup
  \{X_0\},\delta',q_0',X_0,\{q_f\})$, where $\delta'$ is defined by the
  following rules:
\begin{description}

\item[Rule 1] $\delta'(q_0',\epsilon,X_0) = \{(q_0,Z_0X_0)\}$.

\item[Rule 2] for all $q$ in $Q$, $a$ in $\Sigma \cup {\epsilon}$, and
  $Z$ in $\Gamma$, $\delta'(q,a,Z) = \delta(q,a,Z)$.

\item[Rule 3] for all $q$ in $Q$, $\delta'(q,\epsilon,X_0)$ contains
  $(q_f,\epsilon)$.

\end{description}

\begin{holdef}[\HOLtm{newm'}]
\begin{salltt}

\HOLthm[nostile,>>,def,M1/p,X0/x0]{laeslafs.newm'_def}
\end{salltt}
\end{holdef}

Rule~1 causes $M_2$ to enter the initial ID of $M_1$, except that
$M_2$ will have its own bottom-of-stack marker $X_0$, which is below
the symbols of $M_1$'s stack. Rule~2 allows $M_2$ to simulate
$M_1$. Should $M_1$ ever erase its entire stack, then $M_2$, when
simulating $M_1$, will erase its entire stack except the symbol $X_0$
at the bottom. Rule~3 causes $M_2$, when the $X_0$ appears, to enter a
final state thereby accepting the input $x$.


We proceed in a similar manner to the proof of
Theorem~\ref{thm:lafsEqlaes}, establishing $L(M_2) = N(M_1)$:
\begin{holthm}
\begin{salltt}

\HOLthm[nostile,>>,M1/m,M2/m']{laeslafs.thm52}
\end{salltt}
\end{holthm}

Again, we must use the precondition that the universes of the types of symbols and states
are infinite.
\end{proof}

In the remainder of the paper, we discuss the proof of equivalence of PDAs and
CFGs.
Constructing a PDA for a CFG is a straightforward process so
instead we devote much of the space to explaining the construction of
a CFG from PDA and its equivalence proof.
In order to illustrate the
gap between the textbook \textit{vs.} theorem prover formalisation,
we try to follow Hopcroft and Ullman as closely as possible. As in the
book, for the construction of a PDA from a CFG, we assume the grammar
is in Greibach normal form.



%%% Local Variables:
%%% mode: latex
%%% TeX-master: "pda"
%%% End:

% LocalWords:  CFGs PDAs
