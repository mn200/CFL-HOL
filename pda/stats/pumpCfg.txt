val pumpCfg = store_thm
("pumpCfg",
``∀g.
   isCnf (g:('a,'b) grammar)  ⇒
   ∃n. n > 0 ∧
       ∀z. z ∈ language g ∧ LENGTH z ≥ n ⇒
           ∃u v w x y.
	     (z = u ++ v ++ w ++ x ++ y) ∧
             LENGTH v + LENGTH x ≥ 1 ∧
             LENGTH v + LENGTH w + LENGTH x ≤ n ∧
             ∀i. u++FLAT (lpow v i)++w++FLAT (lpow x i)++y ∈ language g``,

SRW_TAC [][] THEN
 Q.ABBREV_TAC `k=LENGTH (ntms g)` THEN
Q.EXISTS_TAC `2**k` THEN
SRW_TAC [][] THEN1 SRW_TAC [][Abbr`k`, GREATER_DEF] THEN
`z ∈ llanguage g` by METIS_TAC [drd_ld_langeq] THEN
`(lderives g)^* [NTS (startSym g)] z ∧ EVERY isTmnlSym z`
  by FULL_SIMP_TAC (srw_ss()) [llanguage_def] THEN
`∃dl.(lderives g) ⊢ dl ◁ [NTS (startSym g)] → z`
  by METIS_TAC [rtc2list_exists'] THEN
Q.ABBREV_TAC `k0=LENGTH (distinctldNts dl)` THEN
`LENGTH (distinctldNts dl) ≥ 1` by METIS_TAC [numdlds] THEN
`k0 ≥ 1 ⇒ 1 ≤ k0` by DECIDE_TAC THEN
`isNonTmnlSym (NTS (startSym g))` by METIS_TAC [isNonTmnlSym_def] THEN
IMP_RES_TAC dldntsLeg THEN
FULL_SIMP_TAC (srw_ss()) [isNonTmnlSym_def] THEN
`MEM (startSym g) (ntms g)` by
(SRW_TAC [][ntms_def, ntList_def, nonTerminalsList_def] THEN
 METIS_TAC [rmd_r2, MEM, APPEND]) THEN
`k0 ≤ k` by METIS_TAC [dldntsLeg] THEN
 `1 ≤ k0` by METIS_TAC [] THEN
`k ≠ 0` by DECIDE_TAC THEN
 `LENGTH z ≥ 2 ** k0` by METIS_TAC [powGtTrans] THEN
 `LENGTH z > 2**(k0-1)` by METIS_TAC [powGt] THEN
 `symRepProp dl` by METIS_TAC [inpLeninv,symRepProp_def] THEN
`EVERY isNonTmnlSym ([NTS (startSym g)]:('a,'b) symbol list)`
by METIS_TAC [APPEND_ASSOC,APPEND_11,symbol_11,isNonTmnlSym_def,EVERY_DEF] THEN
 `∃pz0:('a,'b) symbol list sz0:('a,'b) symbol list.([NTS (startSym g)]=pz0++sz0) ∧
	 EVERY isTmnlSym pz0 ∧ EVERY isNonTmnlSym sz0`
 by METIS_TAC [EVERY_DEF,APPEND_NIL] THEN
`lastExpProp (g,dl,z)`
by METIS_TAC [lastExp,symbol_11] THEN
FULL_SIMP_TAC (srw_ss()) [lastExpProp] THEN
SRW_TAC [][] THEN
`lderives g ⊢ (dl1++TL dl2) ◁ [NTS n1]++[NTS n2] → (v++rst)` by
METIS_TAC [listderivTrans, APPEND] THEN
`∃pfx sfx.([NTS n1]++[NTS n2]=pfx++sfx) ∧ EVERY isTmnlSym pfx ∧
	 EVERY isNonTmnlSym sfx` by
(MAP_EVERY Q.EXISTS_TAC [`[]`,`[NTS n1]++[NTS n2]`] THEN
 SRW_TAC [][isNonTmnlSym_def]) THEN
`∃dl1' dl2' zb zy.
   splitDerivProp (g,dl1++TL dl2,v++rst)
   (dl1',[NTS n1],zb) (dl2',[NTS n2],zy)` by METIS_TAC [ldSplitDeriv,EVERY_APPEND] THEN
FULL_SIMP_TAC (srw_ss()) [splitDerivProp] THEN
SRW_TAC [][] THEN
`LENGTH zb ≤ 2**(LENGTH (distinctldNts dl1') -1)`
by METIS_TAC [symRepProp_def, inpLen,EVERY_APPEND] THEN
`LENGTH zy ≤ 2**(LENGTH (distinctldNts dl2') -1)`
by METIS_TAC [symRepProp_def, inpLen,EVERY_APPEND] THEN
SRW_TAC [][] THEN
`∃v''.zb++zy=v++v''`by
(IMP_RES_TAC twoListAppEq THEN
 FULL_SIMP_TAC (srw_ss()) [] THEN SRW_TAC [][] THEN
 METIS_TAC [APPEND_ASSOC]) THEN
SRW_TAC [][] THEN
`lderives g ⊢ MAP (listsec v []) dl2 ◁
   listsec v [] (v ++ ([NTS B]++w)) → listsec v [] (v ++ v'')`
by METIS_TAC [listsecldSfxNil,APPEND_ASSOC,EVERY_APPEND] THEN
FULL_SIMP_TAC (srw_ss()) [listsecDropNilSfx] THEN
`¬symRepProp (MAP (listsec v []) dl2)` by METIS_TAC [notspropLsTmnls,
						    APPEND_ASSOC,
						    EVERY_APPEND] THEN
`MEM (v++[NTS B]++w) dl1` by
(Cases_on `dl1` THEN FULL_SIMP_TAC (srw_ss()) [listderiv_def] THEN
 METIS_TAC [MEM, MEM_APPEND, APPEND_FRONT_LAST]) THEN
`v ++ [NTS B] ++ w = v ++ ([NTS B]++w)` by SRW_TAC [][] THEN
`∃p1 p2.([NTS B]++w = p1++p2) ∧ EVERY isTmnlSym p1 ∧ EVERY isNonTmnlSym p2`
by METIS_TAC [ldMemlderivesSfx] THEN
`∃dl1' dl2' zb' zy'.
   splitDerivProp (g,(MAP (listsec v []) dl2),v'') (dl1',[NTS B],zb')
   (dl2',w,zy')`
by METIS_TAC [APPEND,ldSplitDeriv] THEN
FULL_SIMP_TAC (srw_ss()) [splitDerivProp] THEN
SRW_TAC [][] THEN
FULL_SIMP_TAC (srw_ss()) [] THEN
SRW_TAC [][] THEN
MAP_EVERY Q.EXISTS_TAC [`tsl`,`v`,`zb'`,`zy'`,`rst'`] THEN
SRW_TAC [][] THEN1
(FULL_SIMP_TAC (srw_ss()) [ntProp] THEN SRW_TAC [][]
 THENL[
       `LENGTH ([NTS B;NTS n2]) > 1` by
       FULL_SIMP_TAC (srw_ss()++ARITH_ss) [] THEN
       `v ≠ [] ∨ w ≠ []` by METIS_TAC [cnfvwNotNil] THEN1
       (`LENGTH v ≠ 0` by METIS_TAC [LENGTH_NIL] THEN DECIDE_TAC) THEN
       `p1 = []` by (Cases_on `p1` THEN SRW_TAC [][] THEN
		     Cases_on `h` THEN SRW_TAC [][] THEN
		     FULL_SIMP_TAC (srw_ss()) [isTmnlSym_def,
					       isNonTmnlSym_def]) THEN
       SRW_TAC [][] THEN FULL_SIMP_TAC (srw_ss()) [] THEN
       FULL_SIMP_TAC (srw_ss()) [] THEN
       `zy' ≠ []` by METIS_TAC [cnfNotLderivesNilAllntms,
				EVERY_DEF, APPEND_NIL] THEN
       `LENGTH zy' ≠ 0` by METIS_TAC [LENGTH_NIL] THEN
       DECIDE_TAC,

       `LENGTH ([NTS n1;NTS n2]) > 1` by
       FULL_SIMP_TAC (srw_ss()++ARITH_ss) [] THEN
       `v ≠ [] ∨ w ≠ []` by METIS_TAC [cnfvwNotNil] THEN1
       (`LENGTH v ≠ 0` by METIS_TAC [LENGTH_NIL] THEN DECIDE_TAC) THEN
       `p1 = []` by (Cases_on `p1` THEN SRW_TAC [][] THEN
		     Cases_on `h` THEN SRW_TAC [][] THEN
		     FULL_SIMP_TAC (srw_ss()) [isTmnlSym_def,
					       isNonTmnlSym_def]) THEN
       SRW_TAC [][] THEN FULL_SIMP_TAC (srw_ss()) [] THEN
       FULL_SIMP_TAC (srw_ss()) [] THEN
       `zy' ≠ []` by METIS_TAC [cnfNotLderivesNilAllntms,
				EVERY_DEF, APPEND_NIL] THEN
       `LENGTH zy' ≠ 0` by METIS_TAC [LENGTH_NIL] THEN
       DECIDE_TAC])
THENL[
      `LENGTH (distinctldNts dl1') ≤
      LENGTH (distinctldNts (dl1 ++ TL dl2))` by METIS_TAC [distElemLen_def] THEN
      `LENGTH (distinctldNts dl2') ≤
      LENGTH (distinctldNts (dl1 ++ TL dl2))` by METIS_TAC [distElemLen_def] THEN
      `LENGTH (zb ++ zy) = LENGTH (v ++ zb' ++ zy')`
      by METIS_TAC [APPEND_ASSOC] THEN
      FULL_SIMP_TAC (srw_ss()) [] THEN
      `dl2 ≠ []` by (Cases_on `dl2` THEN
		     FULL_SIMP_TAC (srw_ss()) [listderiv_def]) THEN
      `∀e. (MEM e dl1 ⇒ MEM (tsl ++ e ++ sfx) dl)
      ∧ (∀e. MEM e dl2 ⇒ MEM (tsl ++ e ++ sfx) dl) ⇒
      LENGTH (distinctldNts (dl1++TL dl2)) ≤ LENGTH (distinctldNts dl)` by
      METIS_TAC [dldntsLenLe, APPEND_NIL] THEN
      `∀e. (MEM e dl1 ⇒ MEM (tsl ++ e ++ sfx) dl)
      ∧ (∀e. MEM e dl2 ⇒ MEM (tsl ++ e ++ sfx) dl) ⇒
      LENGTH (distinctldNts (dl1++TL dl2)) ≤ k` by
      METIS_TAC [DECIDE ``a ≤ b ∧ b ≤ c ⇒ a ≤ c``] THEN
      FULL_SIMP_TAC (srw_ss()) [distElemLen_def] THEN
      `LENGTH (distinctldNts dl1') ≤ k`
      by METIS_TAC [DECIDE ``a ≤ b ∧ b ≤ c ⇒ a ≤ c``] THEN
      `LENGTH (distinctldNts dl2') ≤ k`
      by METIS_TAC [DECIDE ``a ≤ b ∧ b ≤ c ⇒ a ≤ c``] THEN
      `LENGTH zb ≤ 2 ** (k-1)` by METIS_TAC [powLe] THEN
      `LENGTH zy ≤ 2 ** (k-1)` by METIS_TAC [powLe] THEN
      `LENGTH zb + LENGTH zy ≤ 2**(k-1) + 2**(k-1)`by DECIDE_TAC THEN
       `LENGTH zb + LENGTH zy ≤ 2*2**(k-1)`by DECIDE_TAC THEN
       `LENGTH zb + LENGTH zy ≤ 2**(k-1+1)`by METIS_TAC [powMult] THEN
       `LENGTH dl > 1` by
       (SPOSE_NOT_THEN ASSUME_TAC THEN
	Cases_on `dl` THEN FULL_SIMP_TAC (srw_ss()) [listderiv_def] THEN
	Cases_on `t` THEN FULL_SIMP_TAC (srw_ss()++ARITH_ss) [] THEN
	SRW_TAC [][] THEN
	`EVERY isTmnlSym (pz0++sz0)` by METIS_TAC [EVERY_APPEND] THEN
	Cases_on `pz0` THEN FULL_SIMP_TAC (srw_ss()) [] THEN
	SRW_TAC [][] THEN
	FULL_SIMP_TAC (srw_ss()) [isTmnlSym_def]) THEN
       `k0 ≥ 1` by METIS_TAC [dldntsGe1] THEN
       `k - 1 + 1 = k` by DECIDE_TAC THEN
       METIS_TAC [],

       FULL_SIMP_TAC (srw_ss()) [language_def,llanguage_def, EXTENSION] THEN
       SRW_TAC [][]
       THENL[
	     (* 3 subgoals *)

	     (* 1 *)
	     FULL_SIMP_TAC (srw_ss()) [ntProp] THEN
	     (Cases_on `p` THEN FULL_SIMP_TAC (srw_ss()) [] THEN1
	      (`(tsl ++ [NTS B] ++ sfx) = pz0++sz0`
	      by FULL_SIMP_TAC (srw_ss()) [listderiv_def] THEN
	      `(tsl ++ [NTS B] ++ sfx = [NTS (startSym g)])`
	      by METIS_TAC [] THEN
	      FULL_SIMP_TAC (srw_ss()) [lreseq] THEN SRW_TAC [][] THEN

	      `(lderives g)^* [NTS (startSym g)] (pfx++sfx')`
	      by METIS_TAC [ldMemRel, APPEND, APPEND_NIL, APPEND_ASSOC] THEN

	      `dl1 ≠ []` by (Cases_on `dl1` THEN FULL_SIMP_TAC (srw_ss()) [listderiv_def]) THEN
	      `(lderives g)^* (pfx++sfx') (v ++ [NTS (startSym g)] ++ w)`
	      by METIS_TAC [rtc2listRtcHdLast, listderiv_def, APPEND_ASSOC] THEN

	      `dl1'' ≠ []` by (Cases_on `dl1''` THEN FULL_SIMP_TAC (srw_ss()) [listderiv_def]) THEN
	      `(lderives g)^* [NTS (startSym g)] zb'`
	      by METIS_TAC [rtc2listRtcHdLast, listderiv_def, APPEND_ASSOC] THEN

	      `dl2'' ≠ []` by (Cases_on `dl2''` THEN FULL_SIMP_TAC (srw_ss()) [listderiv_def]) THEN
	      `(lderives g)^* w zy'`
	      by METIS_TAC [rtc2listRtcHdLast, listderiv_def, APPEND_ASSOC] THEN
	      `(lderives g)^* [NTS (startSym g)] (v ++ [NTS (startSym g)] ++ w)`
	      by METIS_TAC [RTC_RTC] THEN
	      `(lderives g)^* v v` by SRW_TAC [][] THEN
	      `(lderives g)^* [NTS (startSym g)]
	     (FLAT (lpow v i) ++ zb' ++ FLAT (lpow zy' i))`
	      by METIS_TAC [rtcDerivesReplEnd] THEN
	      `rst' = []` by
	      (Cases_on `dl3`  THEN FULL_SIMP_TAC (srw_ss()) [listderiv_def] THEN
	       SRW_TAC [][] THEN
	       Cases_on `t` THEN FULL_SIMP_TAC (srw_ss()) [lderives_def]) THEN
	      SRW_TAC [][] THEN FULL_SIMP_TAC (srw_ss()) [] THEN
	      `llanguage g = language g` by METIS_TAC [drd_ld_langeq] THEN
	      FULL_SIMP_TAC (srw_ss()) [language_def, llanguage_def, EXTENSION] THEN
	      METIS_TAC [EVERY_APPEND, islpowTmnl]) THEN

	     `h = pz0++sz0` by FULL_SIMP_TAC (srw_ss()) [listderiv_def] THEN
	     SRW_TAC [][] THEN

	      `(lderives g)^* [NTS (startSym g)] (tsl ++ pfx++sfx'++sfx)`
	      by METIS_TAC [ldMemRel, APPEND, APPEND_ASSOC] THEN

	      `dl1 ≠ []` by (Cases_on `dl1` THEN FULL_SIMP_TAC (srw_ss()) [listderiv_def]) THEN
	      `(lderives g)^* (pfx++sfx') (v ++ [NTS B] ++ w)`
	      by METIS_TAC [rtc2listRtcHdLast, listderiv_def, APPEND_ASSOC] THEN

	      `dl1'' ≠ []` by (Cases_on `dl1''` THEN FULL_SIMP_TAC (srw_ss()) [listderiv_def]) THEN
	      `(lderives g)^* [NTS B] zb'`
	      by METIS_TAC [rtc2listRtcHdLast, listderiv_def, APPEND_ASSOC] THEN


	      `dl3 ≠ []` by (Cases_on `dl3` THEN FULL_SIMP_TAC (srw_ss()) [listderiv_def]) THEN
	      `(lderives g)^* sfx rst'`
	      by METIS_TAC [rtc2listRtcHdLast, listderiv_def, APPEND_ASSOC] THEN

	      `dl2'' ≠ []` by (Cases_on `dl2''` THEN FULL_SIMP_TAC (srw_ss()) [listderiv_def]) THEN
	      `(lderives g)^* w zy'`
	      by METIS_TAC [rtc2listRtcHdLast, listderiv_def, APPEND_ASSOC] THEN
	      `(lderives g)^* [NTS (startSym g)] (tsl ++ v ++ [NTS B] ++ w ++sfx)`
	      by METIS_TAC [RTC_RTC, rtc_lderives_same_append_left,
			    rtc_lderives_same_append_right, APPEND_ASSOC] THEN
	      `(lderives g)^* [NTS B] (pfx++sfx')` by
	      (`lderives g (tsl ++ [NTS B] ++ sfx)
	       (tsl ++ pfx ++ sfx' ++ sfx)`
	       by METIS_TAC [ldMemRel', APPEND, APPEND_ASSOC] THEN
	       FULL_SIMP_TAC (srw_ss()) [lderives_def] THEN
	       SRW_TAC [][] THEN
	      `EVERY isNonTmnlSym [NTS lhs]` by SRW_TAC [][isNonTmnlSym_def] THEN
	       `(s1=tsl) ∧ ([NTS lhs] ++ s2 = [NTS B]++sfx)`
	       by METIS_TAC [symlistdiv3, NOT_CONS_NIL] THEN
	       FULL_SIMP_TAC (srw_ss()) [] THEN
	       SRW_TAC [][] THEN
	       `rhs = pfx++sfx'` by METIS_TAC [APPEND_11, APPEND_ASSOC] THEN
	       METIS_TAC [ldres1, RTC_RULES]) THEN
	      `(lderives g)^* [NTS B] (v ++ [NTS B] ++ w)`
	      by METIS_TAC [RTC_RTC] THEN
	      `(lderives g)^* v v` by SRW_TAC [][] THEN
	      `(lderives g)^* [NTS B]
                 (FLAT (lpow v i) ++ zb' ++ FLAT (lpow zy' i))`
	      by METIS_TAC [rtcDerivesReplEnd] THEN
	      `llanguage g = language g` by METIS_TAC [drd_ld_langeq] THEN
	      FULL_SIMP_TAC (srw_ss()) [language_def, llanguage_def, EXTENSION] THEN
	      `(lderives g)^* (pz0++sz0) (tsl ++ [NTS B] ++sfx)`
	      by METIS_TAC [ldMemRel, APPEND, APPEND_ASSOC] THEN
	      `(lderives g)^* (pz0++sz0)
		 (tsl ++ (FLAT (lpow v i) ++ zb' ++ FLAT (lpow zy' i)) ++ sfx)`
	      by METIS_TAC [EVERY_APPEND, islpowTmnl, RTC_RTC,
			    rtc_lderives_same_append_right,
			    rtc_lderives_same_append_left] THEN
	      `(lderives g)^*
		 (tsl ++ FLAT (lpow v i) ++ zb' ++ FLAT (lpow zy' i) ++ sfx)
		 (tsl ++ FLAT (lpow v i) ++ zb' ++ FLAT (lpow zy' i) ++ rst')`
	      by METIS_TAC [APPEND_ASSOC, EVERY_APPEND, islpowTmnl,
			    rtc_lderives_same_append_left] THEN
	      `(lderives g)^* (pz0++sz0)
		 (tsl ++ FLAT (lpow v i) ++ zb' ++ FLAT (lpow zy' i) ++ rst')`
	      by METIS_TAC [RTC_RTC, APPEND_ASSOC] THEN
	      METIS_TAC [EVERY_APPEND, islpowTmnl]),

	      METIS_TAC [islpowTmnl],

	      METIS_TAC [islpowTmnl]
	      ]]);
